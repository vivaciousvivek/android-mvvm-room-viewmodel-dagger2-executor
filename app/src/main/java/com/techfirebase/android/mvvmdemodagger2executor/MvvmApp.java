package com.techfirebase.android.mvvmdemodagger2executor;

import android.app.Activity;
import android.app.Application;

import com.techfirebase.android.mvvmdemodagger2executor.di.component.DaggerAppComponent;

import javax.inject.Inject;

import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.HasActivityInjector;

/**
 * Created by VIVEK KUMAR SINGH on 3/27/2018.
 *
 * <p>DaggerApplicationComponent is the generated class by the Dagger, implementing the
 * ApplicationComponent. We provide the ApplicationModule class that is used to construct the
 * dependencies.
 *
 * <p>In our case its name will be DaggerAppComponent.
 *
 * <p>This DaggerAppComponent stub will be generated automatically by Dagger when you build your
 * project.
 *
 * <p>Add name attribute of your application <application ... android:name=".MvvmApp" ....> //
 * activities </application>
 */
public class MvvmApp extends Application implements HasActivityInjector {

  @Inject DispatchingAndroidInjector<Activity> activityDispatchingAndroidInjector;

  /**
   * Application class and MainActivity class. These classes donâ€™t have a constructor and Android
   * System is responsible for instantiating these. To get the dependency we use the OnCreate method
   * as it is called once when they are instantiated.
   *
   * <p>We have called the inject method of appComponent and passed the instance of the MvvmApp
   * class.
   */
  @Override
  public void onCreate() {
    super.onCreate();
    /*
     * One way to to get application component object, Components can be instantiated by using the
     * Builders generated by Dagger. But it is deprecated
     */
    /*appComponent = DaggerAppComponent.builder().appModule(new AppModule()).build();
    appComponent.inject(this);*/

    /*
     * Other way to to get application component object, Dagger allows us to customize the generated
     * builder by
     *
     * <p>@Component.Builder
     */
    DaggerAppComponent.builder().application(this).build().inject(this);
  }

  @Override
  public AndroidInjector<Activity> activityInjector() {
    return activityDispatchingAndroidInjector;
  }
}
